ASSIGNMENT 1
Q1]
=> def twoSum(nums, target):
    num_map = {} 
    for i, num in enumerate(nums):
        complement = target - num  # Calculate the complement
        
        if complement in num_map:
            return [num_map[complement], i]  # Return the indices
            
        num_map[num] = i  # Add the number and its index to the map
    
    return []  # No solution found

# Example usage
nums = [2, 7, 11, 15]
target = 9
result = twoSum(nums, target)
print(result)  



Q2]
=>def removeElement(nums, val):
    k = 0  # Count of elements not equal to val
    
    for i in range(len(nums)):
        if nums[i] != val:
            nums[k] = nums[i]  # Move the non-val element to the front
            k += 1

    return k


nums = [3, 2, 2, 3]
val = 3
result = removeElement(nums, val)
print(result)  
print(nums)  


Q3]
=>def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2  
        
        if nums[mid] == target:
            return mid 
        
        elif nums[mid] < target:
            left = mid + 1  # Target is in the right half of the array
        
        else:
            right = mid - 1  # Target is in the left half of the array
    
    return left  


nums = [1, 3, 5, 6]
target = 5
result = searchInsert(nums, target)
print(result)  # Output: 2

4]
=>def plusOne(digits):
    n = len(digits)
    
    
    for i in range(n - 1, -1, -1):
        if digits[i] < 9:
            digits[i] += 1
            return digits
        else:
            digits[i] = 0  # Set the current digit to 0 and continue
    
    # If the loop completes, it means all digits were 9
    # Add an additional digit 1 at the beginning
    return [1] + digits


digits = [1, 2, 3]
result = plusOne(digits)
print(result)  


6]
=>def containsDuplicate(nums):
    num_set = set()  
    
    for num in nums:
        if num in num_set:
            return True  
        num_set.add(num)
    
    return False  

nums = [1, 2, 3, 1]
print(containsDuplicate(nums))

7]
=>def moveZeroes(nums):
   
    pos = 0
    for i in range(len(nums)):
        
        if nums[i] != 0:
            nums[pos] = nums[i]
            pos += 1
    while pos < len(nums):
        nums[pos] = 0
        pos += 1
nums = [0, 1, 0, 3, 12]
moveZeroes(nums)
print(nums)
